05. Reflect: Initializing a Repository

Question:
What happens when you initialize a repository?
Answer:
It creates a new repository in the current directory where the command is run, adding the a hidden folder .git that contains meta data used to track the history of the repo since it was created (see video 031 - What makes a repository a repository?)

Question:
Why do you need to do it?
Answer:
Without initializing a repo, commits cannot be made and changes to files within the directory cannot be tracked.
Note since this folder is hidden, to view the folder, run 'ls -a'.

08. Reflect: Staging Area

Question:
How is the staging area different from the working directory and the repository? What value do you think it offers?
Answer:
The Staging Area is an intermediate area between the Working Directory and Repository. It offers more control in the sense that it allows one to specify exactly which changes are to be committed.

The Working directory, on the other hand, is bascially the user's hard drive containing the regular files whose changes the user may want to track later.

12. Reflect: Commit Size

Question:
How can you use the staging area to make sure you have one commit per logical change?

Answer:
By adding the file to the staging area using 'git add <filename e.g. 'file.txt'>', and comparing the file in the staging area to the most recent commit by running 'git diff --staged'.
This show which files are in the staging area and what lines have been specifically modified.

16. Reflect: When to use Branches

Question:
What are some situations when branches would be helpful in keeping your history oranized? How would branches help?

Answer:
Branches are useful in the some of the following cases:
1. When one is making experimental features and want to try out a demo version
2. When one wants to correct a bug (See video: Mike Wales interview)
3. In cases when one wants to make versions of the software in other languages
4. Generally, when one to make a significant change to the  functionality of a project without tampering with the working version of production quality. (See video: Interview with Mike Wales) In summary and in Mike Wales words, any time you are doing something different engage branches.

And while the linear commit history may be used, however, if for example there is a bug in the tip or node branch of the official from which one want create the branch, then branching makes this easier especially to make a fix in this official version by
1. Updating this newly updated version
2. Avoiding overhead resulting from favouring a linear commit history
3. And finally, creating a label (or branch) for these commits.
4. It helps in keeping your work organised.

Overall, branches help to keep your projects organized.

20. Reflect: Visualizing with Diagram

Question:
How do the diagrams help you visualize the branch structure?

Answer:
1. It provides a parent-child relationship in-between commits and with respect to branch names and their respective commits.

2. By extension, this makes it easy to keep track of the commits and figure out whether or not a commmit is reachable from a branch (or HEAD).

25. Reflect: Merging Two Branches

Question
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Answer
When two branches are merge together, the contents of the newly created commit (which is now the tip of one of the branches, most preferably the master) will include all the changes from both branches. Not only is this new commit updated to include these changes from the two branches, you also have access to the old commits of each of these branches involved in the merge.

This is quite different from what we would see if we took the state of files at the tip of say the coins branch (i.e. 'ships on coins') and made a commit with thhat on top of master by adding that file or commit whilst checked out in master branch. All this would do is set master to be in the same state as coins.

This is the reason we represent it in the diagram so as to provide a visual sense of which commits are included in the merging. 

Also, if a branch (label) is deleted, leaving some commits unreachable from the existing branches, those commits will contine to be accessible by commit id, until Git's garbage collection runs, which is quite different from just update a branch, say master, to the state of files, in another branch, say coins.

32. Reflect: Automatic vs. Manual Merging

Question
What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Answer
With automatic merging, git performs the merging for you based on the orginal versions of the file.
However, if the orginal files were deleted (i.e. not found), then Git reverts to the manual approach which provides users with the advantage of determining whether or not they would like to keep certain versions of the modified file(s), probably the ones which are more memory efficient or faster.

Further more, Git assumes that if you are merging together two commits that have changes in the same general area, the authors will want to know about it and have the chance to decide for themselves whether or not to keep the changes. 
This way one can also avoid weird conglomerate changes that don't really make any sense and will not compile or run. (Courtesy Udacity lecture video).